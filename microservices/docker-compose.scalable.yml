version: '3.8'

services:
  # Database with optimized settings for high load
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: alarms_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ZZ4charlie
      # Performance tuning for high load
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 4MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_CHECKPOINT_SEGMENTS: 32
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_migration.sql:/docker-entrypoint-initdb.d/01-migration.sql
    networks:
      - alarm-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis with persistence and clustering support
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - alarm-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # API Gateway with load balancing
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://admin:ZZ4charlie@postgres:5432/alarms_db
      - MAX_WORKERS=4
      - WORKER_CONNECTIONS=1000
    depends_on:
      - redis
      - postgres
    networks:
      - alarm-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Scalable Alarm Scheduler Service
  alarm-scheduler:
    build:
      context: .
      dockerfile: alarm-scheduler/Dockerfile
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://admin:ZZ4charlie@postgres:5432/alarms_db
      - MAX_DB_CONNECTIONS=20
      - MIN_DB_CONNECTIONS=5
      - TIMEZONE=America/Los_Angeles
    depends_on:
      - redis
      - postgres
    networks:
      - alarm-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  # Alarm Processor Service with multiple instances
  alarm-processor:
    build:
      context: .
      dockerfile: alarm-processor/Dockerfile
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://admin:ZZ4charlie@postgres:5432/alarms_db
      - DESCRIPTION_API_URL=http://api-gateway:8000/code-descriptions
      - MAX_WORKERS=4
    depends_on:
      - redis
      - postgres
      - api-gateway
    networks:
      - alarm-network
    deploy:
      replicas: 5
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Email Service with rate limiting and queuing
  email-service:
    build:
      context: .
      dockerfile: email-service/Dockerfile
    ports:
      - "8004:8004"
    environment:
      - REDIS_URL=redis://redis:6379
      - SMTP_SERVER=smtp.mail.yahoo.com
      - SMTP_PORT=587
      - SMTP_USER=kluge7@yahoo.com
      - SMTP_PASSWORD=kpjlmwqsslhbecpq!
      - SIMULATION_MODE=true
      - EMAIL_RATE_LIMIT=100
      - EMAIL_BATCH_SIZE=10
    depends_on:
      - redis
    networks:
      - alarm-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Database Service with connection pooling
  database-service:
    build:
      context: .
      dockerfile: database-service/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://admin:ZZ4charlie@postgres:5432/alarms_db
      - MAX_CONNECTIONS=50
      - MIN_CONNECTIONS=10
    depends_on:
      - postgres
    networks:
      - alarm-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Load Balancer with health checks
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.scalable.conf:/etc/nginx/nginx.conf
    depends_on:
      - api-gateway
      - alarm-scheduler
      - alarm-processor
      - email-service
      - database-service
    networks:
      - alarm-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Monitoring service for performance tracking
  monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - alarm-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - alarm-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  alarm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 